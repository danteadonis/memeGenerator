{"version":3,"sources":["components/HeaderComponent.jsx","components/MemeGenComponent.jsx","components/FooterComponent.jsx","components/Container.jsx","App.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","state","imgSrc","styles","header","fontFamily","yaoMing","width","height","style","this","className","src","alt","Component","MemeGenComponent","tweetText","topText","bottomText","randomImg","allMemeImgs","modalBody","backgroundColor","TweetConverter","node","document","getElementById","htmlToImage","then","dataUrl","img","Image","appendChild","catch","err","console","error","MemeConverter","ClearImg","removeChild","lastChild","HandleChange","ev","target","name","value","setState","Generate","preventDefault","rNum","Math","floor","random","length","rMemeImg","url","ShowTweetStyle","tweetStyle","memeStyle","display","ShowMemeStyle","fetch","res","json","memes","data","id","tabIndex","aria-labelledby","aria-hidden","type","onClick","data-bs-dismiss","aria-label","data-bs-toggle","aria-expanded","htmlFor","placeholder","onChange","data-bs-target","onSubmit","FooterComponent","footerLinks","git","twi","web","href","Container","bgColors","color","RandomizeColor","bgDanger","querySelectorAll","randNum","randColor","log","i","classList","remove","add","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9bd33d5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass HeaderComponent extends Component {\r\n  state = {\r\n    imgSrc: 'yao_ming_meme.png'\r\n  }\r\n\r\n   styles = {\r\n     header: {\r\n       fontFamily: 'Mali'\r\n     },\r\n     yaoMing: {\r\n      width: '50px',\r\n      height: '50px'\r\n     }\r\n   }\r\n\r\n  render() { \r\n    return ( \r\n      <header style={ this.styles.header }>\r\n        <div className=\"bg-danger\">\r\n          <div className=\"container d-flex justify-content-center\">\r\n            <img \r\n              style={ this.styles.yaoMing } \r\n              src={ this.state.imgSrc } \r\n              alt=\"b!tch please\"\r\n              className=\"mx-2 mt-1\"\r\n            />\r\n            <div className=\"text-light mx-1\">\r\n              <h4>Quick Meme-er</h4>\r\n              <h5 className=\"lead\">...a meme generator</h5>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n     );\r\n  }\r\n}\r\n \r\nexport default HeaderComponent;\r\n","import React, { Component } from 'react'; \r\nimport '../styles/MemeGen.css';\r\nimport * as htmlToImage from 'html-to-image';\r\nimport toPng from 'html-to-image';\r\n\r\nclass MemeGenComponent extends Component {\r\n  state = { \r\n    tweetText: '',\r\n    topText: '',\r\n    bottomText: '',\r\n    randomImg: 'http://i.imgflip.com/1bij.jpg',\r\n    allMemeImgs: []\r\n   }\r\n\r\n   componentDidMount(){\r\n     fetch('http://i.imgflip.com/get_memes')\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        const {memes} = res.data\r\n        this.setState({ allMemeImgs: memes })\r\n      })\r\n   }\r\n\r\n   styles = {\r\n     modalBody: {\r\n       backgroundColor: '#eee'\r\n     }\r\n   }\r\n\r\n   TweetConverter = () => {\r\n     const node = document.getElementById('tweetStyleImg');\r\n     const modalBody = document.getElementById('modalBody');\r\n     htmlToImage.toPng(node)\r\n      .then((dataUrl) => {\r\n        const img = new Image();\r\n        // img.width=950;\r\n        // img.height=850;\r\n        img.src = dataUrl;\r\n        modalBody.appendChild(img)\r\n      })\r\n      .catch((err) => {\r\n        console.error('Did not find node.', err);\r\n      })\r\n   }\r\n\r\n   MemeConverter = () => {\r\n     const node = document.getElementById('finalMemeImg');\r\n     const modalBody = document.getElementById('modalBody');\r\n     htmlToImage.toPng(node)\r\n      .then((dataUrl) => {\r\n        const img = new Image();\r\n        // img.width=950;\r\n        // img.height=850;\r\n        img.src = dataUrl;\r\n        modalBody.appendChild(img)\r\n      })\r\n      .catch((err) => {\r\n        console.error('Did not find node.', err);\r\n      })\r\n   }\r\n\r\n   ClearImg = () => {\r\n     const modalBody = document.getElementById('modalBody');\r\n     modalBody.removeChild(modalBody.lastChild);\r\n   }\r\n\r\n   HandleChange = (ev) => {\r\n     const {name, value} = ev.target\r\n     this.setState({\r\n       [name]: value\r\n     })\r\n   }\r\n   \r\n   Generate = (ev) => {\r\n     ev.preventDefault()\r\n     const rNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n     const rMemeImg = this.state.allMemeImgs[rNum].url\r\n     this.setState({ randomImg: rMemeImg })\r\n   }\r\n\r\n  ShowTweetStyle = () => {\r\n    const tweetStyle = document.getElementById('tweetStyle');\r\n    const memeStyle = document.getElementById('memeStyle');\r\n    tweetStyle.style.display = 'block';\r\n    memeStyle.style.display = 'none';\r\n  }\r\n\r\n  ShowMemeStyle = () => {\r\n    const memeStyle = document.getElementById('memeStyle');\r\n    const tweetStyle = document.getElementById('tweetStyle');\r\n    memeStyle.style.display = 'block';\r\n    tweetStyle.style.display = 'none';\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <div className=\"container\">\r\n\r\n        {/* Modal */}\r\n        <div \r\n          className=\"modal fade\" \r\n          id=\"resultModal\" \r\n          tabIndex=\"-1\" \r\n          aria-labelledby=\"resultModalLabel\" \r\n          aria-hidden=\"true\"\r\n        >\r\n          <div className=\"modal-dialog modal-dialog-centered\">\r\n            <div className=\"modal-content bg-danger text-light\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"resultModalLabel\">Generated Image</h5>\r\n                <button \r\n                  type=\"button\" \r\n                  onClick={ this.ClearImg }\r\n                  className=\"btn-close\" \r\n                  data-bs-dismiss=\"modal\" \r\n                  aria-label=\"Close\"\r\n                >\r\n                </button>\r\n              </div>\r\n              <div \r\n                id=\"modalBody\" \r\n                className=\"modal-body container text-center m-auto\"\r\n                style={ this.styles.modalBody }\r\n              >\r\n                {/*  */}\r\n              </div>\r\n              {/* <div className=\"modal-footer\">\r\n                <a href=\"\" dowload=\"meme.png\" onClick={ this.ClearImg }>  \r\n                <button type=\"button\" className=\"btn btn-primary\">Download</button>\r\n                </a>\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Dropdown */}\r\n        <div className=\"dropdown text-center\">\r\n          <button \r\n            className=\"btn btn-lg bg-danger text-light dropdown-toggle my-5\" \r\n            type=\"button\" \r\n            id=\"dropdownMenuButton\" \r\n            data-bs-toggle=\"dropdown\" \r\n            aria-expanded=\"false\"\r\n          >\r\n            Choose Meme Style\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n            <li onClick={ this.ShowTweetStyle } className=\"dropdown-item\">Tweet</li>\r\n            <li onClick={ this.ShowMemeStyle } className=\"dropdown-item\">Text On Pic</li>\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Tweet style */}\r\n        <div id=\"tweetStyle\">\r\n          <form className=\"text-left\">\r\n            <label htmlFor=\"tweetText\" className=\"form-label\">Tweet text</label>\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\"\r\n              name=\"tweetText\"\r\n              id=\"tweetText\"\r\n              placeholder=\"what you want as the tweet...\"\r\n              value={ this.state.tweetText }\r\n              onChange={ this.HandleChange }\r\n            />\r\n            <br/>\r\n            <button className=\"btn btn-sm bg-danger text-light float-end mb-4\">Generate</button>\r\n          </form>\r\n          <div id=\"tweetStyleImg\">\r\n            <div className=\"tweetMeme text-left mt-5\">\r\n              <p className=\"lead\">{ this.state.tweetText }</p>\r\n              <img src={ this.state.randomImg } alt=\"tweet\" id=\"tweetImg\"/>\r\n            </div>\r\n          </div>\r\n          <button \r\n            onClick={ this.TweetConverter } \r\n            className=\"btn btn-sm bg-danger text-light float-end my-4\"\r\n            data-bs-toggle=\"modal\" \r\n            data-bs-target=\"#resultModal\"\r\n          >\r\n            Use this\r\n          </button>\r\n        </div>\r\n\r\n        {/* Meme style */}\r\n        <div id=\"memeStyle\">\r\n          <form className=\"text-left\" onSubmit={ this.Generate }>\r\n            <label htmlFor=\"topText\" className=\"form-label\">Top text</label>\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\" \r\n              name=\"topText\"\r\n              id=\"topText\" \r\n              placeholder=\"what you want at the top...\"\r\n              value={ this.state.topText }\r\n              onChange={ this.HandleChange }\r\n            />\r\n            <br/>\r\n            <label htmlFor=\"bottomText\" className=\"form-label\">Bottom text</label>\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\" \r\n              name=\"bottomText\"\r\n              id=\"bottomText\" \r\n              placeholder=\"what you want at the bottom...\"\r\n              value={ this.state.bottomText }\r\n              onChange={ this.HandleChange }\r\n            />\r\n            <br/>\r\n            <button className=\"btn btn-sm bg-danger text-light float-end\">Generate</button>\r\n          </form>\r\n          <div id=\"finalMemeImg\">\r\n            <div className=\"picMeme text-center my-5\">\r\n              <img id=\"memeImg\" src={ this.state.randomImg } alt=\"meme\"/>\r\n              <h3 className=\"text-center upText\">{ this.state.topText }</h3>\r\n              <h3 className=\"text-center downText\">{ this.state.bottomText }</h3>\r\n            </div>\r\n          </div>\r\n          <button \r\n            onClick={ this.MemeConverter } \r\n            className=\"btn btn-sm bg-danger text-light float-end\"\r\n            data-bs-toggle=\"modal\" \r\n            data-bs-target=\"#resultModal\"\r\n          >\r\n            Use this\r\n          </button>\r\n        </div>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default MemeGenComponent;\r\n","import React, { Component } from 'react';\r\nimport '../styles/Footer.css';\r\n\r\nclass FooterComponent extends Component {\r\n  state = { \r\n    footerLinks: {\r\n      git: 'https://github.com/danteadonis?tab=repositories',\r\n      twi: 'https://twitter.com/danteadonis_',\r\n      web: 'https://danteadonis.herokuapp.com/'\r\n    }\r\n   }\r\n  render() { \r\n    return ( \r\n      <footer className=\"footer bg-danger text-light text-center\">\r\n        <ul className=\"d-flex justify-content-center pt-3\">\r\n          <li className=\"mx-2\">\r\n            <a href={ this.state.footerLinks.git }>\r\n              <i className=\"faIcons fab fa-github-alt\"></i>\r\n            </a>\r\n          </li>\r\n          <li className=\"mx-2\">\r\n            <a href={ this.state.footerLinks.twi }>\r\n              <i className=\"faIcons fab fa-twitter\"></i>\r\n            </a>\r\n          </li>\r\n          <li className=\"mx-2\">\r\n            <a href={ this.state.footerLinks.web }>\r\n              <i className=\"faIcons fas fa-globe\"></i>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        {/* <p>&copy; DanteAdonis, 2020.</p> */}\r\n      </footer>\r\n     );\r\n  }\r\n}\r\n \r\nexport default FooterComponent;\r\n","import React, { Component } from 'react';\r\nimport HeaderComponent from '../components/HeaderComponent';\r\nimport MemeGenComponent from '../components/MemeGenComponent';\r\nimport FooterComponent from '../components/FooterComponent';\r\n\r\nclass Container extends Component {\r\n  state = { \r\n    bgColors: [\r\n      {color: 'bg-danger'},\r\n      {color: 'bg-info'},\r\n      {color: 'bg-success'},\r\n      {color: 'bg-warning'},\r\n      {color: 'bg-primary'},\r\n      {color: 'bg-secondary'},\r\n      {color: 'bg-dark'}\r\n    ]\r\n   }\r\n\r\n   componentDidMount(){\r\n     this.RandomizeColor();\r\n   }\r\n\r\n  RandomizeColor = () => {\r\n    const bgDanger = document.querySelectorAll('.bg-danger');\r\n    const randNum = Math.floor(Math.random() * this.state.bgColors.length);\r\n    const randColor = this.state.bgColors[randNum].color;\r\n\r\n    console.log(`Theme in use: ${randColor}`);\r\n\r\n    for(let i = 0; i < bgDanger.length; i++){\r\n      bgDanger[i].classList.remove('bg-danger');\r\n      bgDanger[i].classList.add(randColor);\r\n    }\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <div>\r\n        <HeaderComponent />\r\n        <MemeGenComponent />\r\n        <FooterComponent />\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Container;\r\n","import './App.css';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}