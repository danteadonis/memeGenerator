[{"C:\\Users\\user\\memegenerator\\src\\index.js":"1","C:\\Users\\user\\memegenerator\\src\\App.js":"2","C:\\Users\\user\\memegenerator\\src\\reportWebVitals.js":"3","C:\\Users\\user\\memegenerator\\src\\components\\Container.jsx":"4","C:\\Users\\user\\memegenerator\\src\\components\\FooterComponent.jsx":"5","C:\\Users\\user\\memegenerator\\src\\components\\MemeGenComponent.jsx":"6","C:\\Users\\user\\memegenerator\\src\\components\\HeaderComponent.jsx":"7"},{"size":288,"mtime":1607593229743,"results":"8","hashOfConfig":"9"},{"size":182,"mtime":1608032287107,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1209,"mtime":1608095541120,"results":"12","hashOfConfig":"9"},{"size":1159,"mtime":1608243190566,"results":"13","hashOfConfig":"9"},{"size":7638,"mtime":1608241233318,"results":"14","hashOfConfig":"9"},{"size":930,"mtime":1608243335400,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1sshxzd",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\user\\memegenerator\\src\\index.js",[],["33","34"],"C:\\Users\\user\\memegenerator\\src\\App.js",[],"C:\\Users\\user\\memegenerator\\src\\reportWebVitals.js",[],"C:\\Users\\user\\memegenerator\\src\\components\\Container.jsx",[],"C:\\Users\\user\\memegenerator\\src\\components\\FooterComponent.jsx",[],"C:\\Users\\user\\memegenerator\\src\\components\\MemeGenComponent.jsx",["35"],"import React, { Component } from 'react'; \r\nimport '../styles/MemeGen.css';\r\nimport * as htmlToImage from 'html-to-image';\r\nimport toPng from 'html-to-image';\r\n\r\nclass MemeGenComponent extends Component {\r\n  state = { \r\n    tweetText: '',\r\n    topText: '',\r\n    bottomText: '',\r\n    randomImg: 'http://i.imgflip.com/1bij.jpg',\r\n    allMemeImgs: []\r\n   }\r\n\r\n   componentDidMount(){\r\n     fetch('http://i.imgflip.com/get_memes')\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        const {memes} = res.data\r\n        this.setState({ allMemeImgs: memes })\r\n      })\r\n   }\r\n\r\n   styles = {\r\n     modalBody: {\r\n       backgroundColor: '#eee'\r\n     }\r\n   }\r\n\r\n   TweetConverter = () => {\r\n     const node = document.getElementById('tweetStyleImg');\r\n     const modalBody = document.getElementById('modalBody');\r\n     htmlToImage.toPng(node)\r\n      .then((dataUrl) => {\r\n        const img = new Image();\r\n        // img.width=950;\r\n        // img.height=850;\r\n        img.src = dataUrl;\r\n        modalBody.appendChild(img)\r\n      })\r\n      .catch((err) => {\r\n        console.error('Did not find node.', err);\r\n      })\r\n   }\r\n\r\n   MemeConverter = () => {\r\n     const node = document.getElementById('finalMemeImg');\r\n     const modalBody = document.getElementById('modalBody');\r\n     htmlToImage.toPng(node)\r\n      .then((dataUrl) => {\r\n        const img = new Image();\r\n        // img.width=950;\r\n        // img.height=850;\r\n        img.src = dataUrl;\r\n        modalBody.appendChild(img)\r\n      })\r\n      .catch((err) => {\r\n        console.error('Did not find node.', err);\r\n      })\r\n   }\r\n\r\n   ClearImg = () => {\r\n     const modalBody = document.getElementById('modalBody');\r\n     modalBody.removeChild(modalBody.lastChild);\r\n   }\r\n\r\n   HandleChange = (ev) => {\r\n     const {name, value} = ev.target\r\n     this.setState({\r\n       [name]: value\r\n     })\r\n   }\r\n   \r\n   Generate = (ev) => {\r\n     ev.preventDefault()\r\n     const rNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n     const rMemeImg = this.state.allMemeImgs[rNum].url\r\n     this.setState({ randomImg: rMemeImg })\r\n   }\r\n\r\n  ShowTweetStyle = () => {\r\n    const tweetStyle = document.getElementById('tweetStyle');\r\n    const memeStyle = document.getElementById('memeStyle');\r\n    tweetStyle.style.display = 'block';\r\n    memeStyle.style.display = 'none';\r\n  }\r\n\r\n  ShowMemeStyle = () => {\r\n    const memeStyle = document.getElementById('memeStyle');\r\n    const tweetStyle = document.getElementById('tweetStyle');\r\n    memeStyle.style.display = 'block';\r\n    tweetStyle.style.display = 'none';\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <div className=\"container\">\r\n\r\n        {/* Modal */}\r\n        <div \r\n          className=\"modal fade\" \r\n          id=\"resultModal\" \r\n          tabIndex=\"-1\" \r\n          aria-labelledby=\"resultModalLabel\" \r\n          aria-hidden=\"true\"\r\n        >\r\n          <div className=\"modal-dialog modal-dialog-centered\">\r\n            <div className=\"modal-content bg-danger text-light\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"resultModalLabel\">Generated Image</h5>\r\n                <button \r\n                  type=\"button\" \r\n                  onClick={ this.ClearImg }\r\n                  className=\"btn-close\" \r\n                  data-bs-dismiss=\"modal\" \r\n                  aria-label=\"Close\"\r\n                >\r\n                </button>\r\n              </div>\r\n              <div \r\n                id=\"modalBody\" \r\n                className=\"modal-body container text-center m-auto\"\r\n                style={ this.styles.modalBody }\r\n              >\r\n                {/*  */}\r\n              </div>\r\n              {/* <div className=\"modal-footer\">\r\n                <a href=\"\" dowload=\"meme.png\" onClick={ this.ClearImg }>  \r\n                <button type=\"button\" className=\"btn btn-primary\">Download</button>\r\n                </a>\r\n              </div> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Dropdown */}\r\n        <div className=\"dropdown text-center\">\r\n          <button \r\n            className=\"btn btn-lg bg-danger text-light dropdown-toggle my-5\" \r\n            type=\"button\" \r\n            id=\"dropdownMenuButton\" \r\n            data-bs-toggle=\"dropdown\" \r\n            aria-expanded=\"false\"\r\n          >\r\n            Choose Meme Style\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n            <li onClick={ this.ShowTweetStyle } className=\"dropdown-item\">Tweet</li>\r\n            <li onClick={ this.ShowMemeStyle } className=\"dropdown-item\">Text On Pic</li>\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Tweet style */}\r\n        <div id=\"tweetStyle\">\r\n          <form className=\"text-left\">\r\n            <label htmlFor=\"tweetText\" className=\"form-label\">Tweet text</label>\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\"\r\n              name=\"tweetText\"\r\n              id=\"tweetText\"\r\n              placeholder=\"what you want as the tweet...\"\r\n              value={ this.state.tweetText }\r\n              onChange={ this.HandleChange }\r\n            />\r\n            <br/>\r\n            <button className=\"btn btn-sm bg-danger text-light float-end mb-4\">Generate</button>\r\n          </form>\r\n          <div id=\"tweetStyleImg\">\r\n            <div className=\"tweetMeme text-left mt-5\">\r\n              <p className=\"lead\">{ this.state.tweetText }</p>\r\n              <img src={ this.state.randomImg } alt=\"tweet\" id=\"tweetImg\"/>\r\n            </div>\r\n          </div>\r\n          <button \r\n            onClick={ this.TweetConverter } \r\n            className=\"btn btn-sm bg-danger text-light float-end my-4\"\r\n            data-bs-toggle=\"modal\" \r\n            data-bs-target=\"#resultModal\"\r\n          >\r\n            Use this\r\n          </button>\r\n        </div>\r\n\r\n        {/* Meme style */}\r\n        <div id=\"memeStyle\">\r\n          <form className=\"text-left\" onSubmit={ this.Generate }>\r\n            <label htmlFor=\"topText\" className=\"form-label\">Top text</label>\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\" \r\n              name=\"topText\"\r\n              id=\"topText\" \r\n              placeholder=\"what you want at the top...\"\r\n              value={ this.state.topText }\r\n              onChange={ this.HandleChange }\r\n            />\r\n            <br/>\r\n            <label htmlFor=\"bottomText\" className=\"form-label\">Bottom text</label>\r\n            <input \r\n              type=\"text\" \r\n              className=\"form-control\" \r\n              name=\"bottomText\"\r\n              id=\"bottomText\" \r\n              placeholder=\"what you want at the bottom...\"\r\n              value={ this.state.bottomText }\r\n              onChange={ this.HandleChange }\r\n            />\r\n            <br/>\r\n            <button className=\"btn btn-sm bg-danger text-light float-end\">Generate</button>\r\n          </form>\r\n          <div id=\"finalMemeImg\">\r\n            <div className=\"picMeme text-center my-5\">\r\n              <img id=\"memeImg\" src={ this.state.randomImg } alt=\"meme\"/>\r\n              <h3 className=\"text-center upText\">{ this.state.topText }</h3>\r\n              <h3 className=\"text-center downText\">{ this.state.bottomText }</h3>\r\n            </div>\r\n          </div>\r\n          <button \r\n            onClick={ this.MemeConverter } \r\n            className=\"btn btn-sm bg-danger text-light float-end\"\r\n            data-bs-toggle=\"modal\" \r\n            data-bs-target=\"#resultModal\"\r\n          >\r\n            Use this\r\n          </button>\r\n        </div>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default MemeGenComponent;\r\n",["36","37"],"C:\\Users\\user\\memegenerator\\src\\components\\HeaderComponent.jsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":8,"nodeType":"44","messageId":"45","endLine":4,"endColumn":13},{"ruleId":"38","replacedBy":"46"},{"ruleId":"40","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'toPng' is defined but never used.","Identifier","unusedVar",["48"],["49"],"no-global-assign","no-unsafe-negation"]